# .cursorrules

[goal]
Ensure all components follow Tailwind CSS best practices and maintain pixel-perfect accuracy as per the Figma design.

[widgets]
- Follow the structure in `/src/widgets/`
- Each widget must be:
  - Self-contained (index.jsx or .js)
  - Have a SCSS/CSS module if required
  - Registered in `resources.js` and `WidgetBlocks/block.js`

[widget-generator]
When I say "Create a widget called [WidgetName]", automatically:

1. **Naming Conventions (Auto-convert):**
   - PascalCase for component names and folders (e.g., HomeServices)
   - SCREAMING_SNAKE_CASE for constants (e.g., HOME_SERVICES)
   - kebab-case for CSS classes and resource values (e.g., home-services)

2. **File Structure:**
   ```
   src/widgets/[PascalCase]/
   ├── index.js                    // Main component
   └── [PascalCase].module.scss   // SCSS module (if styling needed)
   ```

3. **Component Template:**
   ```jsx
   "use client"
   import React from 'react';
   import styles from './[PascalCase].module.scss';
   
   const [PascalCase] = ({ data, slug, ...props }) => {
     return (
       <div className={`[kebab-case]-widget ${styles.container || ''}`}>
         <h2>[PascalCase] Widget</h2>
         {/* Widget content here */}
         {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
       </div>
     );
   };
   
   export default [PascalCase];
   ```

4. **Auto-Updates Required:**
   - Add `export const [SCREAMING_SNAKE_CASE] = "widgets.[kebab-case]";` to `src/constants/resources.js`
   - Update `src/components/WidgetBlocks/block.js`:
     - Import constant from resources
     - Import widget component
     - Add to components object in setComponent function

5. **Follow existing patterns from current block.js structure**

[code-style]
- Use `use client` directive when necessary.
- Follow component-based architecture.
- Prioritize accessibility and semantic HTML.
- Keep utility functions in `/src/lib` or `/src/utils`.

[rules]
- New UI section? → Create a widget in `/widgets`
- Always update `resources.js` and `widgetBlocks.js` when a new widget is added
- Use dynamic imports only when necessary for performance
- Avoid redundant props; spread clean props from CMS into widget components

[optimization]
- Prefer lightweight images (WebP if possible)
- Lazy load components via dynamic imports if not above the fold
- Minimize re-renders; memoize components that receive static props
- Defer loading of non-critical scripts/assets

[ai-task-default]
Generate:
- Pixel-perfect Tailwind component
- SCSS module (if needed)
- Auto-update widget registry files

[figma]
Use Figma MCP plugin output and match class names/styles precisely.

[widget-examples]
Example usage:
- "Create a widget called HomeServices" → Auto-generates all files and updates
- "Create a widget called UserProfile" → Follows same pattern
- "Create a widget called ContactForm" → Complete widget setup